-- VHDL Entity ece411.Cache_Datapath.interface
--
-- Created:
--          by - chng2.ews (linux-a2.ews.illinois.edu)
--          at - 03:42:28 10/04/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Datapath IS
   PORT( 
      ADDRESS        : IN     LC3B_WORD;
      AddressSel     : IN     std_logic;
      CacheWrite_H   : IN     std_logic;
      DATAOUT        : IN     LC3b_word;
      MREAD_L        : IN     std_logic;
      MWRITEH_L      : IN     std_logic;
      MWRITEL_L      : IN     std_logic;
      RESET_L        : IN     std_logic;
      WayDataInSel   : IN     std_logic;
      clk            : IN     std_logic;
      pmdatain       : IN     LC3b_oword;
      AddressInCache : OUT    std_logic;
      CacheDirty_H   : OUT    std_logic;
      CacheHit_H     : OUT    std_logic;
      CacheMiss_H    : OUT    std_logic;
      DATAIN         : OUT    LC3b_word;
      LoadStore      : OUT    std_logic;
      MRESP_H        : OUT    std_logic;
      pmaddress      : OUT    LC3b_word;
      pmdataout      : OUT    LC3b_oword
   );

-- Declarations

END Cache_Datapath ;

--
-- VHDL Architecture ece411.Cache_Datapath.struct
--
-- Created:
--          by - chng2.ews (linux-a2.ews.illinois.edu)
--          at - 03:42:29 10/04/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;


ARCHITECTURE struct OF Cache_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADDRESS_INDEX      : LC3b_C_set;
   SIGNAL ADDRESS_OFFSET     : LC3B_C_OFFSET;
   SIGNAL ADDRESS_OFFSET_0   : STD_LOGIC;
   SIGNAL ADDRESS_OFFSET_3_1 : LC3B_8MUX_SEL;
   SIGNAL ADDRESS_TAG        : LC3B_C_TAG;
   SIGNAL B                  : std_logic;
   SIGNAL Byte0              : LC3b_Byte;
   SIGNAL Byte1              : LC3b_Byte;
   SIGNAL Byte2              : LC3b_Byte;
   SIGNAL Byte3              : LC3b_Byte;
   SIGNAL CacheTag           : lc3b_C_Tag;
   SIGNAL CacheTag0          : LC3b_C_Tag;
   SIGNAL CacheTag1          : LC3b_C_Tag;
   SIGNAL Cache_Address      : LC3b_word;
   SIGNAL DataoutMuxout      : LC3b_oword;
   SIGNAL F                  : std_logic;
   SIGNAL F1                 : std_logic;
   SIGNAL F10                : std_logic;
   SIGNAL F11                : std_logic;
   SIGNAL F12                : std_logic;
   SIGNAL F13                : std_logic;
   SIGNAL F14                : std_logic;
   SIGNAL F15                : std_logic;
   SIGNAL F2                 : std_logic;
   SIGNAL F3                 : std_logic;
   SIGNAL F4                 : std_logic;
   SIGNAL F5                 : std_logic;
   SIGNAL F6                 : std_logic;
   SIGNAL F7                 : std_logic;
   SIGNAL F8                 : std_logic;
   SIGNAL F9                 : std_logic;
   SIGNAL FoundWay0          : std_logic;
   SIGNAL FoundWay1          : std_logic;
   SIGNAL HighMuxout         : LC3b_byte;
   SIGNAL LRUout             : std_logic;
   SIGNAL LowMuxout          : LC3b_byte;
   SIGNAL Out0               : std_logic;
   SIGNAL Out1               : std_logic;
   SIGNAL Out2               : std_logic;
   SIGNAL Out3               : std_logic;
   SIGNAL Out4               : std_logic;
   SIGNAL Out5               : std_logic;
   SIGNAL Out6               : std_logic;
   SIGNAL Out7               : std_logic;
   SIGNAL Way0DataWrite      : std_logic;
   SIGNAL Way0Dataout        : LC3B_OWORD;
   SIGNAL Way0DirtyOut       : std_logic;
   SIGNAL Way0ValidOut       : std_logic;
   SIGNAL Way1DataWrite      : std_logic;
   SIGNAL Way1Dataout        : LC3B_OWORD;
   SIGNAL Way1DirtyOut       : std_logic;
   SIGNAL Way1ValidOut       : std_logic;
   SIGNAL WayDataIn          : LC3B_OWORD;
   SIGNAL WaySel             : std_logic;
   SIGNAL Word               : LC3b_word;
   SIGNAL Word0              : LC3B_Word;
   SIGNAL Word0out           : LC3b_word;
   SIGNAL Word1              : LC3B_Word;
   SIGNAL Word1out           : LC3B_Word;
   SIGNAL Word2              : LC3B_Word;
   SIGNAL Word2out           : LC3B_Word;
   SIGNAL Word3              : LC3B_Word;
   SIGNAL Word3out           : LC3B_Word;
   SIGNAL Word4              : LC3B_Word;
   SIGNAL Word4out           : LC3B_Word;
   SIGNAL Word5              : LC3B_Word;
   SIGNAL Word5out           : LC3B_Word;
   SIGNAL Word6              : LC3B_Word;
   SIGNAL Word6out           : LC3B_Word;
   SIGNAL Word7              : LC3B_Word;
   SIGNAL Word7out           : LC3B_Word;
   SIGNAL aoWordJoiner8out   : LC3B_oWord;

   -- Implicit buffer signal declarations
   SIGNAL AddressInCache_internal : std_logic;
   SIGNAL CacheHit_H_internal     : std_logic;
   SIGNAL DATAIN_internal         : LC3b_word;
   SIGNAL LoadStore_internal      : std_logic;
   SIGNAL MRESP_H_internal        : std_logic;


   -- Component Declarations
   COMPONENT AND2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT AddressJoiner
   PORT (
      ADDRESS_INDEX : IN     LC3b_C_set ;
      CacheTag      : IN     lc3b_C_Tag ;
      Cache_Address : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT AddressSplitter
   PORT (
      ADDRESS            : IN     LC3B_WORD ;
      ADDRESS_OFFSET     : OUT    LC3B_C_OFFSET ;
      ADDRESS_OFFSET_3_1 : OUT    LC3B_8MUX_SEL ;
      ADDRESS_OFFSET_0   : OUT    STD_LOGIC ;
      ADDRESS_TAG        : OUT    LC3B_C_TAG ;
      ADDRESS_INDEX      : OUT    LC3b_C_set 
   );
   END COMPONENT;
   COMPONENT ByteJoiner2
   PORT (
      Byte0 : IN     LC3b_byte ;
      Byte1 : IN     LC3b_byte ;
      Word  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ByteMux2
   PORT (
      A   : IN     LC3b_byte ;
      B   : IN     LC3b_byte ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT DataArray
   PORT (
      DataIn    : IN     LC3B_OWORD;
      DataWrite : IN     std_logic;
      DirtyIn   : IN     std_logic;
      Index     : IN     LC3B_C_INDEX;
      Reset_L   : IN     std_logic;
      TagIn     : IN     LC3B_C_TAG;
      Dataout   : OUT    LC3B_OWORD;
      DirtyOut  : OUT    std_logic;
      TagOut    : OUT    LC3B_C_TAG;
      ValidOut  : OUT    std_logic
   );
   END COMPONENT;
   COMPONENT Decoder8
   PORT (
      A    : IN     LC3b_8Mux_sel ;
      Out0 : OUT    std_logic ;
      Out1 : OUT    std_logic ;
      Out2 : OUT    std_logic ;
      Out3 : OUT    std_logic ;
      Out4 : OUT    std_logic ;
      Out5 : OUT    std_logic ;
      Out6 : OUT    std_logic ;
      Out7 : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Delay5
   PORT (
      F9 : IN     std_logic ;
      B  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT LRUArray
   PORT (
      RESET_L       : IN     std_logic ;
      WaySel        : IN     std_logic ;
      LRUout        : OUT    std_logic ;
      ADDRESS_INDEX : IN     LC3b_C_set ;
      MRESP_H       : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT NOT1
   PORT (
      A : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     std_logic ;
      B : IN     std_logic ;
      F : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT TagComparator
   PORT (
      AddressTag : IN     LC3b_C_Tag ;
      CacheTag   : IN     LC3b_C_Tag ;
      Equals     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux8
   PORT (
      A      : IN     LC3B_word ;
      B      : IN     LC3B_word ;
      C      : IN     LC3B_word ;
      D      : IN     LC3B_word ;
      E      : IN     LC3B_word ;
      F      : IN     LC3B_word ;
      G      : IN     LC3B_word ;
      H      : IN     LC3B_word ;
      Sel    : IN     LC3B_8MUX_SEL ;
      Output : OUT    LC3B_word 
   );
   END COMPONENT;
   COMPONENT WordSplitter2
   PORT (
      A     : IN     LC3b_Word ;
      Byte0 : OUT    LC3b_Byte ;
      Byte1 : OUT    LC3b_Byte 
   );
   END COMPONENT;
   COMPONENT oWordJointer8
   PORT (
      Word0out         : IN     LC3b_word ;
      Word1out         : IN     LC3B_Word ;
      Word2out         : IN     LC3B_Word ;
      Word3out         : IN     LC3B_Word ;
      Word4out         : IN     LC3B_Word ;
      Word5out         : IN     LC3B_Word ;
      Word6out         : IN     LC3B_Word ;
      Word7out         : IN     LC3B_Word ;
      aoWordJoiner8out : OUT    LC3B_oWord 
   );
   END COMPONENT;
   COMPONENT oWordMux2
   PORT (
      A   : IN     LC3B_OWORD ;
      B   : IN     LC3B_OWORD ;
      Sel : IN     std_logic ;
      F   : OUT    LC3B_OWORD 
   );
   END COMPONENT;
   COMPONENT oWordSplitter8
   PORT (
      DataoutMuxout : IN     LC3b_oword;
      Word0         : OUT    LC3B_Word;
      Word1         : OUT    LC3B_Word;
      Word2         : OUT    LC3B_Word;
      Word3         : OUT    LC3B_Word;
      Word4         : OUT    LC3B_Word;
      Word5         : OUT    LC3B_Word;
      Word6         : OUT    LC3B_Word;
      Word7         : OUT    LC3B_Word
   );
   END COMPONENT;
   COMPONENT tagMux2
   PORT (
      A   : IN     lc3b_C_Tag ;
      B   : IN     lc3b_C_Tag ;
      Sel : IN     std_logic ;
      F   : OUT    lc3b_C_Tag 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : AND2 USE ENTITY ece411.AND2;
   FOR ALL : AddressJoiner USE ENTITY ece411.AddressJoiner;
   FOR ALL : AddressSplitter USE ENTITY ece411.AddressSplitter;
   FOR ALL : ByteJoiner2 USE ENTITY ece411.ByteJoiner2;
   FOR ALL : ByteMux2 USE ENTITY ece411.ByteMux2;
   FOR ALL : DataArray USE ENTITY ece411.DataArray;
   FOR ALL : Decoder8 USE ENTITY ece411.Decoder8;
   FOR ALL : Delay5 USE ENTITY ece411.Delay5;
   FOR ALL : LRUArray USE ENTITY ece411.LRUArray;
   FOR ALL : NOT1 USE ENTITY ece411.NOT1;
   FOR ALL : OR2 USE ENTITY ece411.OR2;
   FOR ALL : TagComparator USE ENTITY ece411.TagComparator;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux8 USE ENTITY ece411.WordMux8;
   FOR ALL : WordSplitter2 USE ENTITY ece411.WordSplitter2;
   FOR ALL : oWordJointer8 USE ENTITY ece411.oWordJointer8;
   FOR ALL : oWordMux2 USE ENTITY ece411.oWordMux2;
   FOR ALL : oWordSplitter8 USE ENTITY ece411.oWordSplitter8;
   FOR ALL : tagMux2 USE ENTITY ece411.tagMux2;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_3 : AND2
      PORT MAP (
         A => F,
         B => CacheWrite_H,
         F => Way1DataWrite
      );
   U_4 : AND2
      PORT MAP (
         A => LRUout,
         B => CacheWrite_H,
         F => Way0DataWrite
      );
   U_5 : AND2
      PORT MAP (
         A => FoundWay0,
         B => Way0ValidOut,
         F => F3
      );
   U_6 : AND2
      PORT MAP (
         A => FoundWay1,
         B => Way1ValidOut,
         F => F4
      );
   U_10 : AND2
      PORT MAP (
         A => WaySel,
         B => Way1DirtyOut,
         F => F6
      );
   U_11 : AND2
      PORT MAP (
         A => F7,
         B => Way0DirtyOut,
         F => F5
      );
   U_13 : AND2
      PORT MAP (
         A => AddressInCache_internal,
         B => B,
         F => CacheHit_H_internal
      );
   U_22 : AND2
      PORT MAP (
         A => F9,
         B => F1,
         F => CacheMiss_H
      );
   U_28 : AND2
      PORT MAP (
         A => F15,
         B => CacheHit_H_internal,
         F => MRESP_H_internal
      );
   aAddressJoiner : AddressJoiner
      PORT MAP (
         ADDRESS_INDEX => ADDRESS_INDEX,
         CacheTag      => CacheTag,
         Cache_Address => Cache_Address
      );
   aAddressSplitter : AddressSplitter
      PORT MAP (
         ADDRESS            => ADDRESS,
         ADDRESS_OFFSET     => ADDRESS_OFFSET,
         ADDRESS_OFFSET_3_1 => ADDRESS_OFFSET_3_1,
         ADDRESS_OFFSET_0   => ADDRESS_OFFSET_0,
         ADDRESS_TAG        => ADDRESS_TAG,
         ADDRESS_INDEX      => ADDRESS_INDEX
      );
   aByteJoiner2 : ByteJoiner2
      PORT MAP (
         Byte0 => LowMuxout,
         Byte1 => HighMuxout,
         Word  => Word
      );
   HighMux : ByteMux2
      PORT MAP (
         A   => Byte3,
         B   => Byte2,
         Sel => MWRITEH_L,
         F   => HighMuxout
      );
   LowMux : ByteMux2
      PORT MAP (
         A   => Byte1,
         B   => Byte0,
         Sel => MWRITEL_L,
         F   => LowMuxout
      );
   Way0 : DataArray
      PORT MAP (
         Reset_L   => RESET_L,
         DataWrite => Way0DataWrite,
         Index     => ADDRESS_INDEX,
         DataIn    => WayDataIn,
         TagIn     => ADDRESS_TAG,
         DirtyIn   => LoadStore_internal,
         Dataout   => Way0Dataout,
         TagOut    => CacheTag0,
         ValidOut  => Way0ValidOut,
         DirtyOut  => Way0DirtyOut
      );
   Way1 : DataArray
      PORT MAP (
         Reset_L   => RESET_L,
         DataWrite => Way1DataWrite,
         Index     => ADDRESS_INDEX,
         DataIn    => WayDataIn,
         TagIn     => ADDRESS_TAG,
         DirtyIn   => LoadStore_internal,
         Dataout   => Way1Dataout,
         TagOut    => CacheTag1,
         ValidOut  => Way1ValidOut,
         DirtyOut  => Way1DirtyOut
      );
   WordSelDecoder : Decoder8
      PORT MAP (
         A    => ADDRESS_OFFSET_3_1,
         Out0 => Out0,
         Out1 => Out1,
         Out2 => Out2,
         Out3 => Out3,
         Out4 => Out4,
         Out5 => Out5,
         Out6 => Out6,
         Out7 => Out7
      );
   U_26 : Delay5
      PORT MAP (
         F9 => F9,
         B  => B
      );
   U_1 : LRUArray
      PORT MAP (
         RESET_L       => RESET_L,
         WaySel        => WaySel,
         LRUout        => LRUout,
         ADDRESS_INDEX => ADDRESS_INDEX,
         MRESP_H       => MRESP_H_internal
      );
   U_2 : NOT1
      PORT MAP (
         A => LRUout,
         F => F
      );
   U_8 : NOT1
      PORT MAP (
         A => FoundWay0,
         F => F2
      );
   U_9 : NOT1
      PORT MAP (
         A => WaySel,
         F => F7
      );
   U_16 : NOT1
      PORT MAP (
         A => MWRITEH_L,
         F => F11
      );
   U_17 : NOT1
      PORT MAP (
         A => MWRITEL_L,
         F => F10
      );
   U_18 : NOT1
      PORT MAP (
         A => MREAD_L,
         F => F12
      );
   U_20 : NOT1
      PORT MAP (
         A => MWRITEL_L,
         F => F13
      );
   U_21 : NOT1
      PORT MAP (
         A => MWRITEH_L,
         F => F14
      );
   U_23 : NOT1
      PORT MAP (
         A => AddressInCache_internal,
         F => F1
      );
   U_27 : NOT1
      PORT MAP (
         A => CacheWrite_H,
         F => F15
      );
   U_7 : OR2
      PORT MAP (
         A => F3,
         B => F4,
         F => AddressInCache_internal
      );
   U_12 : OR2
      PORT MAP (
         A => F5,
         B => F6,
         F => CacheDirty_H
      );
   U_14 : OR2
      PORT MAP (
         A => F10,
         B => F11,
         F => F8
      );
   U_15 : OR2
      PORT MAP (
         A => F12,
         B => F8,
         F => F9
      );
   U_19 : OR2
      PORT MAP (
         A => F13,
         B => F14,
         F => LoadStore_internal
      );
   WaySelect : OR2
      PORT MAP (
         A => F2,
         B => FoundWay1,
         F => WaySel
      );
   Comparator0 : TagComparator
      PORT MAP (
         AddressTag => ADDRESS_TAG,
         CacheTag   => CacheTag0,
         Equals     => FoundWay0
      );
   Comparator1 : TagComparator
      PORT MAP (
         AddressTag => ADDRESS_TAG,
         CacheTag   => CacheTag1,
         Equals     => FoundWay1
      );
   U_24 : WordMux2
      PORT MAP (
         A   => ADDRESS,
         B   => Cache_Address,
         Sel => AddressSel,
         F   => pmaddress
      );
   Word0Sel : WordMux2
      PORT MAP (
         A   => Word0,
         B   => Word,
         Sel => Out0,
         F   => Word0out
      );
   Word1Sel : WordMux2
      PORT MAP (
         A   => Word1,
         B   => Word,
         Sel => Out1,
         F   => Word1out
      );
   Word2Sel : WordMux2
      PORT MAP (
         A   => Word2,
         B   => Word,
         Sel => Out2,
         F   => Word2out
      );
   Word3Sel : WordMux2
      PORT MAP (
         A   => Word3,
         B   => Word,
         Sel => Out3,
         F   => Word3out
      );
   Word4Sel : WordMux2
      PORT MAP (
         A   => Word4,
         B   => Word,
         Sel => Out4,
         F   => Word4out
      );
   Word5Sel : WordMux2
      PORT MAP (
         A   => Word5,
         B   => Word,
         Sel => Out5,
         F   => Word5out
      );
   Word6Sel : WordMux2
      PORT MAP (
         A   => Word6,
         B   => Word,
         Sel => Out6,
         F   => Word6out
      );
   Word7Sel : WordMux2
      PORT MAP (
         A   => Word7,
         B   => Word,
         Sel => Out7,
         F   => Word7out
      );
   DataoutMux2 : WordMux8
      PORT MAP (
         A      => Word0,
         B      => Word1,
         C      => Word2,
         D      => Word3,
         E      => Word4,
         F      => Word5,
         G      => Word6,
         H      => Word7,
         Sel    => ADDRESS_OFFSET_3_1,
         Output => DATAIN_internal
      );
   DataInWordSplitter : WordSplitter2
      PORT MAP (
         A     => DATAIN_internal,
         Byte0 => Byte0,
         Byte1 => Byte2
      );
   DataOutWordSplitter : WordSplitter2
      PORT MAP (
         A     => DATAOUT,
         Byte0 => Byte1,
         Byte1 => Byte3
      );
   aoWordJoiner8 : oWordJointer8
      PORT MAP (
         Word0out         => Word0out,
         Word1out         => Word1out,
         Word2out         => Word2out,
         Word3out         => Word3out,
         Word4out         => Word4out,
         Word5out         => Word5out,
         Word6out         => Word6out,
         Word7out         => Word7out,
         aoWordJoiner8out => aoWordJoiner8out
      );
   DataoutMux : oWordMux2
      PORT MAP (
         A   => Way0Dataout,
         B   => Way1Dataout,
         Sel => WaySel,
         F   => DataoutMuxout
      );
   U_0 : oWordMux2
      PORT MAP (
         A   => pmdatain,
         B   => aoWordJoiner8out,
         Sel => WayDataInSel,
         F   => WayDataIn
      );
   pmdataoutMux : oWordMux2
      PORT MAP (
         A   => Way1Dataout,
         B   => Way0Dataout,
         Sel => LRUout,
         F   => pmdataout
      );
   aoWordSplitter8 : oWordSplitter8
      PORT MAP (
         Word0         => Word0,
         Word1         => Word1,
         Word2         => Word2,
         Word3         => Word3,
         Word4         => Word4,
         Word5         => Word5,
         Word6         => Word6,
         Word7         => Word7,
         DataoutMuxout => DataoutMuxout
      );
   U_25 : tagMux2
      PORT MAP (
         A   => CacheTag1,
         B   => CacheTag0,
         Sel => LRUout,
         F   => CacheTag
      );

   -- Implicit buffered output assignments
   AddressInCache <= AddressInCache_internal;
   CacheHit_H     <= CacheHit_H_internal;
   DATAIN         <= DATAIN_internal;
   LoadStore      <= LoadStore_internal;
   MRESP_H        <= MRESP_H_internal;

END struct;
