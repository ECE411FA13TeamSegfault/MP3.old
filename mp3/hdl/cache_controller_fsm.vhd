-- VHDL Entity ece411.Cache_Controller.interface
--
-- Created:
--          by - chng2.ews (linux-a2.ews.illinois.edu)
--          at - 03:16:31 10/04/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Controller IS
   PORT( 
      AddressInCache : IN     std_logic;
      CacheDirty_H   : IN     std_logic;
      CacheHit_H     : IN     std_logic;
      CacheMiss_H    : IN     std_logic;
      LoadStore      : IN     std_logic;
      RESET_L        : IN     std_logic;
      clk            : IN     std_logic;
      pmresp_h       : IN     std_logic;
      AddressSel     : OUT    std_logic;
      CacheWrite_H   : OUT    std_logic;
      WayDataInSel   : OUT    std_logic;
      pmread_l       : OUT    std_logic;
      pmwrite_l      : OUT    std_logic
   );

-- Declarations

END Cache_Controller ;

--
-- VHDL Architecture ece411.Cache_Controller.fsm
--
-- Created:
--          by - chng2.ews (linux-a2.ews.illinois.edu)
--          at - 03:16:31 10/04/13
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2012.1 (Build 6)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Cache_Controller IS

   TYPE STATE_TYPE IS (
      Start,
      WriteBack,
      ReadMem,
      LoadCache,
      StoreOperand
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      RESET_L
   )
   -----------------------------------------------------------------
   BEGIN
      IF (RESET_L = '0') THEN
         current_state <= Start;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      CacheDirty_H,
      CacheMiss_H,
      LoadStore,
      current_state,
      pmresp_h
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN Start => 
            IF ((CacheMiss_H= '1') AND (CacheDirty_H = '1')) THEN 
               next_state <= WriteBack;
            ELSIF ((CacheMiss_H= '1') AND (CacheDirty_H = '0')) THEN 
               next_state <= ReadMem;
            ELSE
               next_state <= Start;
            END IF;
         WHEN WriteBack => 
            IF (pmresp_h = '1') THEN 
               next_state <= ReadMem;
            ELSE
               next_state <= WriteBack;
            END IF;
         WHEN ReadMem => 
            IF (pmresp_h = '1') THEN 
               next_state <= LoadCache;
            ELSE
               next_state <= ReadMem;
            END IF;
         WHEN LoadCache => 
            IF (LoadStore = '0') THEN 
               next_state <= Start;
            ELSIF (LoadStore = '1') THEN 
               next_state <= StoreOperand;
            ELSE
               next_state <= LoadCache;
            END IF;
         WHEN StoreOperand => 
            next_state <= Start;
         WHEN OTHERS =>
            next_state <= Start;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      AddressSel <= '0';
      CacheWrite_H <= '0';
      WayDataInSel <= '0';
      pmread_l <= '1';
      pmwrite_l <= '1';

      -- Combined Actions
      CASE current_state IS
         WHEN WriteBack => 
            AddressSel <= '1';
            pmwrite_l <= '0' after 6ns;
         WHEN ReadMem => 
            pmread_l <= '0' after 6ns;
         WHEN LoadCache => 
            CacheWrite_H <= '1';
            WayDataInSel <=  '0';
         WHEN StoreOperand => 
            CacheWrite_H <= '1';
            WayDataInSel <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
